{
  "name": "THub V2 - Batch Analysis with Priority",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "batch-analysis-trigger",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Batch Analysis Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "batch-analysis-trigger"
    },
    {
      "parameters": {
        "language": "js",
        "jsCode": "// Extract symbols and scores from trigger\nconst data = $input.first().json;\nconst symbols = data.symbols || [];\nconst scores = data.metadata?.opportunityScores || [];\n\n// Create priority queue\nconst priorityQueue = symbols.map((symbol, index) => {\n  const scoreData = scores.find(s => s.symbol === symbol) || {};\n  return {\n    symbol: symbol,\n    opportunityScore: scoreData.score || 50,\n    priority: data.priority || 'normal',\n    source: data.metadata?.source || 'manual'\n  };\n});\n\n// Sort by opportunity score (highest first)\npriorityQueue.sort((a, b) => b.opportunityScore - a.opportunityScore);\n\n// Split into batches for parallel processing\nconst batchSize = 10;\nconst batches = [];\nfor (let i = 0; i < priorityQueue.length; i += batchSize) {\n  batches.push({\n    batchNumber: Math.floor(i / batchSize) + 1,\n    symbols: priorityQueue.slice(i, i + batchSize)\n  });\n}\n\nconsole.log(`Processing ${symbols.length} symbols in ${batches.length} batches`);\n\nreturn batches;"
      },
      "id": "prepare-batches",
      "name": "Prepare Priority Batches",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-batches",
      "name": "Split Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.APP_URL }}/api/webhooks/n8n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "batch_analyze"
            },
            {
              "name": "symbols",
              "value": "={{ $json.symbols.map(s => s.symbol) }}"
            },
            {
              "name": "priority",
              "value": "high"
            },
            {
              "name": "metadata",
              "value": "={{ { batchNumber: $json.batchNumber, source: 'batch_processor', scores: $json.symbols } }}"
            }
          ]
        },
        "options": {
          "timeout": 120000,
          "batching": {
            "batch": {
              "batchSize": 1
            }
          }
        }
      },
      "id": "analyze-batch",
      "name": "Analyze Batch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8n-webhook-auth",
          "name": "n8n Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "language": "js",
        "jsCode": "// Aggregate results from all batches\nconst allResults = [];\nfor (const item of $input.all()) {\n  if (item.json.results) {\n    allResults.push(...item.json.results);\n  }\n}\n\n// Calculate summary statistics\nconst summary = {\n  totalSymbols: allResults.length,\n  signalsCreated: allResults.filter(r => r.signalCreated).length,\n  averageScore: allResults.reduce((sum, r) => sum + (r.convergenceScore || 0), 0) / allResults.length,\n  strongSignals: allResults.filter(r => r.signalStrength === 'STRONG').length,\n  mediumSignals: allResults.filter(r => r.signalStrength === 'MEDIUM').length,\n  timestamp: new Date().toISOString()\n};\n\n// Get high-value signals\nconst highValueSignals = allResults\n  .filter(r => r.signalCreated && r.convergenceScore >= 70)\n  .sort((a, b) => b.convergenceScore - a.convergenceScore);\n\nconsole.log(`Batch analysis complete: ${summary.signalsCreated} signals from ${summary.totalSymbols} symbols`);\n\nreturn {\n  summary: summary,\n  highValueSignals: highValueSignals,\n  allResults: allResults\n};"
      },
      "id": "aggregate-results",
      "name": "Aggregate Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "signals-created",
              "leftValue": "={{ $json.summary.signalsCreated }}",
              "rightValue": "0",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        }
      },
      "id": "check-signals",
      "name": "Signals Created?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "language": "js",
        "jsCode": "// Format signal alerts\nconst signals = $json.highValueSignals || [];\nconst summary = $json.summary;\n\n// Create alert messages\nconst alerts = signals.slice(0, 5).map(signal => ({\n  symbol: signal.symbol,\n  score: signal.convergenceScore,\n  strength: signal.signalStrength,\n  message: `${signal.symbol}: Score ${signal.convergenceScore} (${signal.signalStrength})`\n}));\n\n// Create summary message\nconst summaryMessage = `Batch Analysis Complete\\n` +\n  `Total Analyzed: ${summary.totalSymbols}\\n` +\n  `Signals Created: ${summary.signalsCreated}\\n` +\n  `Strong Signals: ${summary.strongSignals}\\n` +\n  `Average Score: ${summary.averageScore.toFixed(1)}`;\n\nreturn {\n  alerts: alerts,\n  summaryMessage: summaryMessage,\n  hasHighValue: signals.some(s => s.convergenceScore >= 80)\n};"
      },
      "id": "format-alerts",
      "name": "Format Alerts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "channel": "#trading-signals",
        "text": "={{ $json.summaryMessage }}",
        "attachments": [
          {
            "color": "={{ $json.hasHighValue ? '#ff0000' : '#00ff00' }}",
            "title": "Top Signals",
            "text": "={{ $json.alerts.map(a => a.message).join('\\n') }}",
            "footer": "THub V2 Batch Analysis",
            "ts": "={{ Math.floor($now.toSeconds()) }}"
          }
        ],
        "otherOptions": {}
      },
      "id": "notify-results",
      "name": "Notify Results",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $env.PERFORMANCE_SHEET_ID }}",
          "mode": "id"
        },
        "sheetName": "Batch Analysis",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ $json.summary.timestamp }}",
            "totalSymbols": "={{ $json.summary.totalSymbols }}",
            "signalsCreated": "={{ $json.summary.signalsCreated }}",
            "strongSignals": "={{ $json.summary.strongSignals }}",
            "mediumSignals": "={{ $json.summary.mediumSignals }}",
            "averageScore": "={{ $json.summary.averageScore }}"
          }
        }
      },
      "id": "log-analysis",
      "name": "Log Analysis Results",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1450, 400]
    }
  ],
  "connections": {
    "Batch Analysis Trigger": {
      "main": [
        [
          {
            "node": "Prepare Priority Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Priority Batches": {
      "main": [
        [
          {
            "node": "Split Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Batches": {
      "main": [
        [
          {
            "node": "Analyze Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Batch": {
      "main": [
        [
          {
            "node": "Split Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Batches": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Results": {
      "main": [
        [
          {
            "node": "Signals Created?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Signals Created?": {
      "main": [
        [
          {
            "node": "Format Alerts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Alerts": {
      "main": [
        [
          {
            "node": "Notify Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Signals Created?": {
      "main": [
        [
          {
            "node": "Log Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 300
  }
}